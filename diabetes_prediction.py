# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pUuxTCLZCCY5BuMl1Ex4q3HZ_9x37v3v

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix

"""Load the Dataset"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv')
print("First 5 rows of dataset:")
diabetes_dataset.head()

"""Dataset Overview"""

print("\nDataset shape (rows, columns):", diabetes_dataset.shape)
print("\nStatistical Summary:")
diabetes_dataset.describe()

print("\nCount of Outcome (0 = Non-Diabetic, 1 = Diabetic):")
print(diabetes_dataset['Outcome'].value_counts())

"""Outcome Distribution Plot"""

sns.countplot(x='Outcome', data=diabetes_dataset)
plt.title('Count of Diabetic vs Non-Diabetic')
plt.show()

"""Grouped Means by Outcome"""

print("\nMean values grouped by Outcome:")
diabetes_dataset.groupby('Outcome').mean()

"""Pairplot of Selected Features"""

sns.pairplot(diabetes_dataset, hue='Outcome', vars=['Glucose', 'BMI', 'Age', 'BloodPressure'])
plt.show()

""" Correlation Heatmap"""

plt.figure(figsize=(10,8))
sns.heatmap(diabetes_dataset.corr(), annot=True, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
plt.show()

"""Feature and Label Separation"""

X = diabetes_dataset.drop(columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print("\nFeatures (X):")
X.head()

print("\nLabels (Y):")
Y.head()

"""Data Standardization"""

scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
X = standardized_data

print("\nStandardized feature sample:")
print(X[:5])

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print("\nShapes after train-test split:")
print("X shape:", X.shape)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)

"""Train the SVM Model"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, Y_train)

"""Model Accuracy"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('\nTraining Accuracy:', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Test Accuracy:', test_data_accuracy)

"""Accuracy Comparison Plot"""

accuracies = [training_data_accuracy, test_data_accuracy]
labels = ['Training Accuracy', 'Test Accuracy']

plt.bar(labels, accuracies, color=['blue', 'green'])
plt.ylim([0, 1])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.show()

"""Confusion Matrix"""

cm = confusion_matrix(Y_test, X_test_prediction)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Non-Diabetic', 'Diabetic'],
            yticklabels=['Non-Diabetic', 'Diabetic'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""Prediction on New Data"""

input_data = (5,166,72,19,175,25.8,0.587,51)
input_df = pd.DataFrame([input_data], columns=diabetes_dataset.columns[:-1])
std_data = scaler.transform(input_df)

prediction = classifier.predict(std_data)
print("Prediction:", prediction)

if prediction[0] == 0:
    print('The person is not diabetic')
else:
    print('The person is diabetic')

